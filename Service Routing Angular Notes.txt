component - should not contain data
service - hold data
	- communicate with the back end
	- hold common data accross components
	- ng g s book
	- this command does not create a folder

@NgModule
@Component
@Injectable


Forms in Angular - 2 types of forms 
----------------
1) Template driven Form
	- this is what we worked in the session - Add a Book
	- we use ngModel in [()], and angular creates the FormControl object, which represents the form element
2) Reactive Form - preferred over template driven forms
	- we dont use ngModel
	- here we create the FormControl object to represent the form element

Routing in angular
------------------
	- helps to navigate from one component to another component

	- steps for routing - 3 steps
		1) specify the route path for each of your component in app-routing.module.ts file
		2) 2 ways to navigate to a component
			a)specify the <a> to route to the component.( from the template)
				MAKE SURE TO USE routerLink INSTEAD OF href -----> Important, Important, Important
			b)inject Router and use this.router.navigate() in the component class ( navigate from the component class)
		3) specify where the navigated component should be displayed -----> specify <router-outlet> tag in the place where you want the components to be displayed

working with route guards -  2 steps
-------------------------
1) create the route guard and write the logic
	use the command ng g g <guardname>
2) place the route guard in front of the components for which we want to apply it
	in the app-routing.module.ts file specify canActivate: [AuthGuard] for all the components for which the route guard should be activated





user_details
-------------
username(PK)
password
role_id(FK)

role_details
------------
role_id(PK)
role_name


user_roles
----------






